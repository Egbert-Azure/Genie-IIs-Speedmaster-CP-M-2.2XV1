	.printl Including MISCIO.MAC 1.5
;********************************************************
;*							*
;*	MISCIO.MAC  Miscelleanous I/O Module		*
;*	Genie III  CP/M 2.2XV3  Version 1.5  23.01.87	*
;*	Copyright (c) Klaus K{mpf Softwareentwicklung	*
;*					1984,1985,1986	*
;*							*
;*	Modification History				*
;*	1.0  24.02.86  Original Version			*
;*	1.1  13.03.86  Corrected CR/LF on List		*
;*	1.2  23.03.86  Reactivated Handshake 8250	*
;*	1.3  19.04.86  Changed getadr			*
;*	1.4  18.05.86  Added old_iobyte after getadr	*
;*		       Added savstk to handler		*
;*		       Added punst			*
;*	1.5  23.01.87  V24 Handshake rewritten		*
;*							*
;********************************************************
;
;	public		?list,?listst,?punch,?reader
;	public		censt,cenout
;	public		v24st,v24ost,v24in,v24out
;	public		rdrst
;
;	external	getadr,v24_table,break
;	external	keyst,keyin,crtst,crtout
;	external	@lstlf
;
;
?listst:
	call	savstk
listst:
	call	getadr
	defw	<@?listst: dw censt>
	defb	0
	defb	4
	defw	v24ost
	defw	crtst
	defw	censt
	defw	punst
;
?list:
	call	savstk
list:
	ld	a,c
	cp	0ah			;LF ?
	jr	nz,normal_lf		;N: jp
	ld	a,<last_char: 0>
	cp	0dh			;last char cr ?
	jr	nz,normal_lf		;N: jp
	ld	a,(@lstlf)		;allow LF after CR ?
	or	a
	ret	nz			;N: immediate return
normal_lf:
	ld	a,c
	ld	(last_char),a

	call	getadr
	defw	<@?list: dw cenout>
	defb	0
	defb	4
	defw	v24out
	defw	crtout
	defw	cenout
	defw	hexout
;
?punch:
	call	savstk
punch:
	call	getadr
	defw	<@?punch: dw v24out>
	defb	0
	defb	3
	defw	v24out
	defw	cenout
	defw	crtout
	defw	null_out
;
punst:
	call	getadr
	defw	<@?punst: dw v24ost>
	defb	0
	defb	3
	defw	v24ost
	defw	censt
	defw	crtst
	defw	crtst				;always true
;
?reader:
	call	savstk
reader:
	call	getadr
	defw	<@?reader: dw v24in>
	defb	0
	defb	2
	defw	v24in
	defw	v24in
	defw	keyin
	defw	null_in
;
?rdrst:
	call	savstk
rdrst:
	call	getadr
	defw	<@?rdrst: dw v24ist>
	defb	0
	defb	2
	defw	v24ist
	defw	v24ist
	defw	keyst
	defw	crtst			;always true

null_in:
	ld	a,1ah
null_out:
	ret
;
;----------------------------------------------------------
;
censt:
	call	break				;BREAK pressed ?
	jr	z,cen_stat			;Y: true status
	in	a,(0fdh)
	and	0f0h
	cp	30h
cen_stat:
	ld	a,0
	jr	nz,censt1
	dec	a
censt1:
	or	a
	ret
;
cenout:
	call	censt				;status true ?
	jr	z,cenout			;N: wait for true
	ld	a,c
	out	(0fdh),a
	ret
;
hexout:
	ld	a,c
	push	af
      4:rrca
	call	hex_out_digit
	pop	af
	call	hex_out_digit
	ld	c,' '
	jp	punch
;
hex_out_digit:
	and	0fh
	cp	0ah
	jr	c,hex_out_numeric
	add	a,07h
hex_out_numeric:
	add	a,30h
	ld	c,a
	jp	punch
;
;----------------------------------------------------------
;
; Offsets for v24_base:
;
rbr	equ	0		;receiver buffer register
thr	equ	0		;transmitter holding register
ier	equ	1		;interrupt enable register
;
; Offsets for v24_table:
;
msk	equ	2		;receive MaSK (internal)
lcr	equ	3		;Line Control Register
mcr	equ	4		;Modem Control Register
lsr	equ	5		;Line Status Register
msr	equ	6		;Modem Status Register
hsk	equ	7		;HandShaKe (internal)
lrc	equ	8		;Last Received Character
dll	equ	0		;Divisor Latch Low
dlm	equ	1		;Divisor Latch High

v24_base	equ	0e8h	;Baseport V24 (UART 8250)
;
;
; Input Byte from V24
;
v24in:
	ld	hl,@v24chr
	ld	a,(hl)
	ld	(hl),0
	or	a				;char there ?
	ret	nz				;Y: ok
v24_in_wait:
	call	v24_in_ready			;N: check & get char
	jr	v24in				;Wait for Char
;
;
; Output Byte to V24
;
v24out:
	ld	a,c
	push	af
v24_out_wait:
	call	v24_out_ready
	jr	nz,v24_out_wait
	pop	af
	out	(v24_base+thr),a		;send byte
	ret
;
;
; Sense V24 Input Status
;
v24ist:
	call	v24_in_ready
	ld	a,0
	jr	z,not_ready
	dec	a
not_ready:
	or	a
	ret
;
;
; Sense V24 Output Status
;
v24ost:
	call	v24_out_ready
	ld	a,0
	jr	nz,return_out
	dec	a
return_out:
	or	a
	ret
;
;----------------------------------------------------------
;
; Serial in ready ?
; Y: nz, N: z
;
v24_in_ready:
	call	break
	jr	z,char_available
	ld	a,(@v24chr)
	or	a
	jr	nz,char_available
	in	a,(v24_base+lsr)
	and	0000_0001b			;data ready ?
	jr	nz,char_received		;Y: jp
	call	set_tx				;set DTR/RTS
	xor	a
	ret					;N: ret
;
char_received:
	call	reset_tx			;reset DTR/RTS
	in	a,(v24_base+rbr)		;get char
	ld	b,a
	ld	a,(@v24msk)
	and	b
	ld	(@v24chr),a
char_available:
	or	0ffh
	ret
;
set_tx:
	ld	a,0000_0011b			;Set DTR & RTS
set_mcr:
	out	(v24_base+mcr),a
	ret
;
reset_tx:
	ld	a,(@v24mcr)			;Reset DTR & RTS
	jr	set_mcr
;
;
; Serial output ready ?
; Y: z, N: nz
;
v24_out_ready:
	call	break
	ret	z			;Y: ret with ready
	ld	a,(@v24hsk)
	ld	b,a
	bit	0,b			;Wait on ?
	jr	z,no_wait		;N: jp

	in	a,(v24_base+lsr)	;Wait: Check for all send
	and	0100_0000b
	cp	0100_0000b
	ret	nz			;NZ if not all send

no_wait:
	in	a,(v24_base+lsr)	;get status
	and	0010_0000b
	cp	0010_0000b		;transmit empty ?
	ret	nz			;N: ret

	bit	7,b			;Xon/Xoff enabled ?
	jr	nz,chk_xonoff		;Y: check xon/xoff, else check bits

	ld	c,0011_0000b
	ld	a,b
	and	c
	ld	b,a
	in	a,(v24_base+msr)	;get status bits
	and	c			;mask them
	cp	b			;right ones set ?
	ret				;Y: z, N: nz

chk_xonoff:
	in	a,(v24_base+lsr)
	and	0000_0001b		;char avail ?
	jr	z,not_xoff		;N: check internal status
	in	a,(v24_base+rbr)	;Y: get char
	cp	19			;Xoff ?
	jr	nz,not_xoff
	set	1,b			;Y: set xoff status
its_xon:
	ld	a,b
	ld	(@v24hsk),a		;Save final status
not_xoff:
	bit	1,b			;Xoff status ?
	ret	z			;N: ret, out ready !
	cp	17			;Y: Xon received ?
	ret	nz			;N: not ready
	res	1,b			;Y: reset xoff status
	jr	its_xon			;Save & return
