;********************************************************
;*							*
;*	MISCIO.MAC  Miscelleanous I/O Module		*
;*	Genie IIs  CP/M 2.2XV1  Version 0.22  19.5.86	*
;*	Copyright (c) Klaus K{mpf Softwareentwicklung	*
;*					1984,1985,1986	*
;*							*
;*	Modification History				*
;*	0.0  19.04.86  Original Genie III Version	*
;*	0.1  26.04.86  1st IIs Adaption			*
;*	0.2  18.05.86  SIO Adaption			*
;*		       Added old_iobyte after getadr	*
;*		       moved savstk from getadr		*
;*	0.21 19.05.86  Corrected stack handling on exit	*
;*	0.22 19.05.86  moved Set/Reset TX in status	*
;*		       corrected sio?out		*
;*							*
;********************************************************
	.printl Including MISCIO.MAC
;
;	public		?list,?listst,?punch,?reader
;	public		censt,cenout
;	public		sioAist,sioAost,sioAin,sioAout
;	public		sioBist,sioBost,sioBin,sioBout
;	public		?rdrst,?punst
;
;	external	getadr,sio_table,break
;	external	keyst,keyin,crtst,crtout
;	external	@lstlf
;
;
?listst:
	call	savstk
listst:
	call	getadr
	defw	<@?listst: dw censt>
	defb	0
	defb	4
	defw	sioAost
	defw	crtst
	defw	censt
	defw	punst				;hexout
;
?list:
	call	savstk
list:
	ld	a,c
	cp	0ah				;LF ?
	jr	nz,normal_lf			;N: jp
	ld	a,<last_char: 0>
	cp	0dh				;last char cr ?
	jr	nz,normal_lf			;N: jp
	ld	a,(@lstlf)			;allow LF after CR ?
	or	a
	ret	nz				;N: immediate return
normal_lf:
	ld	a,c
	ld	(last_char),a

	call	getadr
	defw	<@?list: dw cenout>
	defb	0
	defb	4
	defw	sioAout
	defw	crtout
	defw	cenout
	defw	hexout
;
?punch:
	call	savstk
punch:
	call	getadr
	defw	<@?punch: dw sioAout>
	defb	0
	defb	3
	defw	sioAout
	defw	cenout
	defw	crtout
	defw	sioBout
;
?punst:
	call	savstk
punst:
	call	getadr
	defw	<@?punst: dw sioAost>
	defb	0
	defb	3
	defw	sioAost
	defw	censt
	defw	crtst
	defw	sioBost
;
?reader:
	call	savstk
reader:
	call	getadr
	defw	<@?reader: dw sioAin>
	defb	0
	defb	2
	defw	sioAin
	defw	null_in
	defw	keyin
	defw	sioBin
;
?rdrst:
	call	savstk
rdrst:
	call	getadr
	defw	<@?rdrst: dw sioAist>
	defb	0
	defb	2
	defw	sioAist
	defw	crtst				;always true
	defw	keyst
	defw	sioBist

null_in:
	ld	a,1ah
null_out:
	ret
;----------------------------------------------------------
censt:
	call	break				;BREAK pressed ?
	jr	z,cen_stat			;Y: true status
	ld	a,(37e8h)
	and	0f0h
	cp	30h
cen_stat:
	ld	a,0
	jr	nz,censt1
	dec	a
censt1:
	or	a
	ret
;
cenout:
	call	censt				;status true ?
	jr	z,cenout			;N: wait for true
	ld	a,c
	ld	(37e8h),a
	ret
;
hexout:
	ld	a,c
	push	af
      4:rrca
	call	hex_out_digit
	pop	af
	call	hex_out_digit
	ld	c,' '
	jp	punch
;
hex_out_digit:
	and	0fh
	cp	0ah
	jr	c,hex_out_numeric
	add	a,07h
hex_out_numeric:
	add	a,30h
	ld	c,a
	jp	punch
;----------------------------------------------------------
.char	equ	0
.TX	equ	1
.mask	equ	2
.prot	equ	3
;
@siotab:
@sioAchr:	defb	0			;Last received char
@sioAtx:	defb	0			;Tx register
@sioAmsk:	defb	0			;Input Mask
@sioAprt:	defb	0			;Protocoll
@sioBchr:	defb	0
@sioBtx:	defb	0
@sioBmsk:	defb	0
@sioBprt:	defb	0
;
sioAist:
	call	sioA
	jr	sio_in_ready?
sioBist:
	call	sioB
sio_in_ready?:
	call	break
	jr	z,sio_in_clear
	ld	a,(ix+.char)
	or	a
	jr	nz,sio_in_clear
	xor	a
	out	(c),a
	in	a,(c)
	and	0000_0001b			;char avail ?
	jr	nz,char_avail			;Y: jp
	ld	a,5
	out	(c),a
	ld	a,(ix+.TX)
	or	1000_0010b			;Set DTR & RTS
	out	(c),a
	xor	a
	ret
char_avail:
	ld	a,5
	out	(c),a
	ld	a,(ix+.TX)			;Update DTR & RTS by prot.
	out	(c),a
	dec	c
	dec	c
	in	a,(c)
	ld	(ix+.char),a
sio_in_clear:
	or	0ffh
	ret
;
;
sioAin:
	call	sioA
	jr	sio_in
sioBin:
	call	sioB
sio_in:
	ld	a,(ix+.char)
	ld	(ix+.char),0
	or	a
	jr	nz,sio_in_exit
sio_in_wait:
	call	sio_in_ready?
	jr	z,sio_in_wait
	ld	a,(ix+.char)
	ld	(ix+.char),0
sio_in_exit:
	and	(ix+.mask)
	ret
;
sioAost:
	call	sioA
	jr	sio_out_status
sioBost:
	call	sioB
sio_out_status:
	call	sio_out_ready?
	ld	a,0
	jr	nz,sio_out_report
	dec	a				;A = ff => out is clear
sio_out_report:
	or	a
	ret
;
; SIO out ready ?
; Y: Z
; N: NZ
;
sio_out_ready?:
	call	break
	ret	z
	ld	b,(ix+.prot)			;B = protocoll
	bit	0,b				;wait ?
	jr	z,no_wait
	ld	a,1
	out	(c),a				;Y: select Reg 1
	in	a,(c)
	and	0000_0001b			;all sent ?
	cp	1
	ret	nz				;N: ret
no_wait:
	push	bc
	ld	a,b
	and	0010_1100b			;check CTS,DCD,Tx Empty
	ld	b,a
	xor	a
	out	(c),a
	in	a,(c)
	and	b				;mask CTS,DCD,TxEmpt
	cp	b				;all clear to send ?
	pop	bc
	ret	nz				;N: ret, noclear
	bit	7,b				;Soft protocoll ?
	ret	z				;N: ret, clear
	dec	c
	dec	c
	in	a,(c)				;Get last received
	inc	c
	inc	c
	cp	#xoff				;XOFF received ?
	jr	nz,check_xonoff			;N: check status
	set	1,b				;Y: set bit
save_xonoff:
	ld	(ix+.prot),b
check_xonoff:
	bit	1,b				;XOFF status ?
	ret	z				;N: ret, clear
	cp	#xon				;XON received ?
	ret	nz				;N: ret, noclear
	res	1,b				;Y: reset xoff status
	jr	save_xonoff			;save status & ret
;
sioAout:
	ld	b,c
	call	sioA
	jr	sio_out
sioBout:
	ld	b,c
	call	sioB
sio_out:
	push	bc
sio_out_loop:
	call	sio_out_ready?
	jr	nz,sio_out_loop
	pop	af
	dec	c
	dec	c
	out	(c),a
	ret
;----------------------------------------------------------
sioA:
	pop	hl				;bc = ret adr
	push	ix
	ld	ix,@siotab+0
	ld	c,0d2h
	jr	sioSet
;
sioB:
	pop	hl
	push	ix
	ld	ix,@siotab+4
	ld	c,0d3h
sioSet:
	push	hl
	ld	hl,sio_exit
	ex	(sp),hl
	xor	a
	ld	(37e4h),a
	jp	(hl)
;
sio_exit:
	pop	ix
	ret
