;********************************************************
;*							*
;*	KEY.MAC  Keyboard Input Module			*
;*	Genie IIs  CP/M 2.2XV1  Version 1.0  27.07.86	*
;*	Copyright (c) Klaus K{mpf Softwareentwicklung	*
;*					1984,1985,1986	*
;*	Modification History				*
;*	0.0  19.04.86  Original Genie III Version	*
;*	0.1  26.04.86  1st IIs Adaption			*
;*	0.11  1.05.86  Corrected FKEY handling		*
;*	0.2  15.05.86  2nd Charset by p1-space		*
;*	0.3  18.05.86  SIO Adaption			*
;*		       Added old_iobyte after getadr	*
;*		       moved savstk to handler		*
;*	1.0  27.07.86  Added P1-Shift as LOCK		*
;*							*
;********************************************************
	.printl Including KEY.MAC
#keyrow	equ	8

;	public		?const,?conin
;	public		keyst,keyin
;	public		intkbd
;	public		pxtab
;	public		chkkbd,fkyput
;	public		click,break,repeat
;
;	external	savstk
;	external	sioist,sioin
;	external	?rdrst,?reader
;	external	fkytab,kbdbuf
;	external	@inlen
;	external	bell,error
;	external	getadr
;	external	flgtx0,flgtx1,flgtx2,flgtx3
;	external	flgtx4,flgtx5,flgtx6,flgtx7
;	external	@k1dly,@k2dly,@dbnc1,@dbnc2
;	external	txtis,txton,txtoff
;	external	save25,load25,rest25
;
; Get console status
;
?const:
	call	savstk
const:
	call	getadr
	defw	<?@const: dw keyst>
	defb	0
	defb	1
	defw	sioAist
	defw	keyst
	defw	rdrst
	defw	sioBist
;
; Console input
;
?conin:
	call	savstk
conin:
	call	getadr
	defw	<?@conin: dw keyin>
	defb	0
	defb	1
	defw	sioAin
	defw	keyin
	defw	reader
	defw	sioBin
;----------------------------------------------------------
; ** Get keyboard status
;
keyst:
	jp	<kbstat: dw nikbds>	;or: nikbds
;
; Non Interrupt key status
;
nikbds:
	call	kbchek			;key pressed ?
	ld	a,<scount: 2>
	dec	a
	ld	(scount),a
	jr	z,no_incrpt
	ld	hl,(rptcnt)
	inc	hl			;-> No repeat
	ld	(rptcnt),hl
no_incrpt:
	ld	a,2
	ld	(scount),a
	jr	test_buffer
;
; Interrupt key status
;
inkbds:
	call	kbchek
;
; Anything in buffer ?
;
test_buffer:
	ld	a,(@inlen)
	or	a
	ret	z
	or	0ffh
	ret
;
; ** Keyboard Input
;
keyin:
	call	test_buffer		;anything in buffer ?
	call	z,kbchek		;N: check keyboard/repeat
	call	getbuf			;Any Key ?
	ret	nz			;Y: ret
	jr	keyin			;N: wait for char
;
; Interrupt driven Keyboard intercept
;
intkbd:
	call	inch1			;Key pressed ?
	or	a
	ret	z			;N: ret
	jr	set_repeat		;Y: set as new repeat & in buffer
;----------------------------------------------------------
; Check for new key or repeat key
;
kbchek:
	call	inch1			;New key pressed ?
	or	a
	jr	z,repeat		;N: test repeat
;					;Y: set in buffer
; Set new repeat char in Buffer
;
set_repeat:
	ld	c,a
	ld	(rptchr),a
	ld	hl,(@k1dly)
;
; Set new char in buffer
;
set_in_buffer:
	ld	(rptcnt),hl
	call	click
	ld	hl,@inlen
	ld	a,(hl)
	cp	64			;Max buflen for single keys
	jr	c,inclen
	call	bell
	xor	a
	ret
inclen:
	inc	(hl)
	ld	hl,kbdbuf
	ld	e,a
	ld	d,0
	add	hl,de
	ld	(hl),c
	ld	a,c
	or	a
	ret
;
; Get char from buffer
;
getbuf:
	call	test_buffer
	ret	z
	ld	hl,kbdbuf+1
	ld	de,kbdbuf
	ld	bc,buflen-1
	ld	a,(de)
	ldir
	ld	hl,@inlen
	dec	(hl)
	or	a
	ret
;
; Repeat char ?
;
repeat:
	nop				;Repeat Flag
	ld	hl,<rptcnt: dw 0>
	dec	hl
	ld	(rptcnt),hl
	ld	a,h
	or	l
	jr	z,chkrpt
	xor	a
	ret
chkrpt:
	ld	a,<rptmsk: 0>
	ld	hl,<rptrow: defw 0>
	and	(hl)			;still same key ?
	jr	nz,rptkey
	xor	a
	ld	(rptchr),a		;Clear rptchr !!
	ld	c,a
	ret
rptkey:
	ld	hl,(@k2dly)
	ld	a,<rptchr: 0>
	ld	c,a
	jr	set_in_buffer
;----------------------------------------------------------
;
; New key pressed ?
;
inch1:
;----------------------------------------------------------
;
; Test keyboard matrix
;
chkkbd:
check_keyboard:
	push	ix
	ld	ix,mask_table
	ld	bc,3801h
	ld	hl,row_buffer
	ld	d,0
key_loop:
	ld	a,(bc)
	and	(ix)
	ld	e,a
	xor	(hl)
	ld	(hl),e
	and	e
	jr	nz,new_key
next_row:
	inc	ix
	inc	hl
	inc	d
	sla	c
	jr	nc,key_loop
	jr	no_new_key
new_key:
	ld	e,a
	push	bc
	ld	bc,(@dbnc1)
	call	delay
	pop	bc
	ld	a,(bc)
	and	e
no_new_key:
	pop	ix
	ret	z

	ld	(rptrow),bc
	ld	(rptmsk),a

	ld	b,-1
which_column:
	inc	b
	rrca
	jr	nc,which_column

	ld	a,d
      3:rlca
	add	a,b

no_xlate:
	ld	hl,3880h
	ld	c,(hl)				;c=(3880h)
	ld	b,a				;a,b=key#
	bit	7,c				;P2 ?
	jp	nz,function_keys		;-> function keys
	cp	30h
	jp	nc,ctrl_keys			;-> control keys

	ld	hl,add_offset
	push	hl

	cp	20h
	jr	nc,not_alfa			;-> numeric & misc
;----------------------------------------------------------
; keycode: 00h - 1fh
; '@' .. '_'
	xor	a				;offset = 0
	bit	6,c				;P1 ?
	jr	z,no_alfap1			;N: cont
	bit	0,c				;Y: P1-Shift ?
	jr	z,alfa_return			;N: P1 only as ctrl
	ld	a,(@lock_mask)
	xor	20h				;5fh <-> 7fh
	ld	(@lock_mask),a
no_alfap1:
	ld	a,b
	or	a
	jr	nz,not_at
	ld	a,40h				;offset = 40h
	bit	0,c				;shift ?
	jr	z,alfa_return
	ld	a,60h				;Y: offset = 60h
	jr	alfa_return
not_at:
	ld	a,40h
	bit	0,c				;shift ?
	jr	nz,alfa_return			;Y: offset = 40h
	ld	a,60h
alfa_return:
	add	a,b
	and	<@lock_mask: 7fh>		;unlock is default
	jr	return_key
;----------------------------------------------------------
;keycode: 20h - 2fh
not_alfa:
	cp	2ch
	jr	nc,shift_flip
	xor	a
	bit	0,c
	ret	nz
	ld	a,10h
	ret
shift_flip:
	xor	a
	bit	0,c
	ret	z
	ld	a,10h
	ret
;----------------------------------------------------------
no_key:
	xor	a
	jr	return_key
add_offset:
	add	a,b
	jr	return_key
;----------------------------------------------------------
ctrl_keys:					;I: A = 30H - 37H
	ld	hl,key_ctrl_table-60h
	ld	e,a
	ld	d,0
	add	hl,de
	add	hl,de
	bit	0,c				;SHIFT ?
	jr	z,unshifted
	inc	hl				;Y: get next table value
unshifted:
	ld	a,(hl)
return_key:
	or	a
	ld	bc,(@dbnc2)
	jp	delay
;
p2_clear:
	xor	a
	ld	(@inlen),a
	ret
p2_space:
	ld	a,(@chrset)
	xor	1
	jp	swap_char
;
; Fx pressed
; A = 00h - xxh
;
function_keys:
	ld	hl,no_key
	push	hl
	cp	31h
	jr	z,p2_clear
	cp	37h
	jr	z,p2_space
	cp	20h				;> '0' ?
	ret	c				;N: no_key
	cp	28h				;< '7' ?
	ret	nc				;N: no_key
	sub	20h
	push	hl
	bit	6,c				;P1 ?
	jr	z,f1_f8
	add	a,8				;Y: F9 - F16
f1_f8:
	ld	b,a				;B = 0 .. 15
	ld	a,(@fxact)
	or	a				;fkey active ?
	jr	z,fkeys_are_active
	ld	a,b
	add	a,80h				;N: A = 80h - 8fh
	jr	return_key
;
fkeys_are_active:
	ld	d,b
	inc	d
	xor	a
	ld	hl,fkytab
	ld	bc,256				;256 chars fkey buffer
fkey_loop:
	cpir
	dec	d
	jr	nz,fkey_loop

fkey_found:
	call	click
fkyput:
	ld	c,l
	ld	b,h				;BC -> Fkey text
	ld	de,(@inlen)
	ld	d,0
	ld	hl,kbdbuf
	add	hl,de
	ex	de,hl				;DE -> KBDBUF
	ld	hl,@inlen			;HL -> @inlen
fkey_put_loop:
	ld	a,(hl)
	cp	buflen
	jp	nc,no_key
	ld	a,(bc)				;get char
	and	7fh				;mask, end of text ?
	jp	z,no_key			;Y: exit
	ld	(de),a				;N: set char in kbdbuf
	inc	bc				;inc text pointer
	inc	de				;inc buf pointer
	inc	(hl)				;inc @inlen
	jr	fkey_put_loop

delay:
	push	af
delay_loop:
	dec	bc
	ld	a,b
	or	c
	jr	nz,delay_loop
	pop	af
	ret

click:
	nop		    			;Clickflag
	push	af,bc
	ld	bc,02028h
	ld	a,0000_0001b
click_loop1:
	out	(0ffh),a
	xor	0000_0011b
	push	bc
click_loop2:
	dec	c
	jr	nz,click_loop2
	pop	bc
	djnz	click_loop1
	pop	bc,af
	ret
;
break:
	ld	a,(3840h)
	cp	4
	ret
;----------------------------------------------------------
key_ctrl_table:	defs	16,0
row_buffer:	defs	#keyrow,0
mask_table:	defb	1111_1111b		;G - @
		defb	1111_1111b		;O - H
		defb	1111_1111b		;W - P
		defb	1111_1111b		;<del> - X
		defb	1111_1111b		;7 - 0
		defb	1111_1111b		;/ - 8
		defb	1111_1111b		;<spc> - <newline>
		defb	0000_0000b		;<ctrl>,<shift>
