;********************************************************
;*							*
;*	KERNEL.MAC  CBIOS Kernel Module			*
;*	Genie IIs  CP/M 2.2XV1 Version 1.2  31.07.86	*
;*	Copyright (c) Klaus K{mpf Softwareentwicklung	*
;*					1984,1985,1986	*
;*	Modification History				*
;*	0.0  19.04.86  Original Version Genie III	*
;*	0.1  26.04.86  1st Adaption to IIs		*
;*	0.11 27.04.86  Added #side			*
;*	0.12 28.04.86  Removed all Genie III labels	*
;*	0.2   1.05.86  Graphic 80x24 Adaption		*
;*	0.3  15.05.86  Charset Adaption			*
;*		       removed clock			*
;*	0.4  18.05.86  SIO Adaption			*
;*		       new phased to E400H		*
;*		       removed savstk from getadr	*
;*	1.0  19.05.86  1st final Version		*
;*	1.1  30.07.86  Added DI at interrupt & swtchg	*
;*	1.2  31.07.86  reconstructed DISK.MAC		*
;*							*
;********************************************************

	.z80
	.com
	.printl Mainfile: KERNEL.MAC
	org 0100h

#xon	equ	17
#xoff	equ	19
space	equ	' '

#row	equ	24
#col	equ	80
#side	equ	4

stack	equ	0fff0h			;upper 16 bytes for wboot !!
buflen	equ	100			;Length of keyboard buffer

?io_byte	equ	3

;	public		swtchi,swtcho,swtchg
;	public		bios,table
;	public		savstk
;	public		getadr
;	public		bell
;	public		table,?@dpb,?@clktab
;	public		@k1dly,@k2dly,@dbnc1,@dbnc2
;	public		@inlen,@crtlf,@wrap
;	public		@fxact,@retries,@lstlf,@insrt
;	public		@plmod,@filin
;	public		print
;	public		stptab,sio_table
;
;	external	?const,?conin,?conout
;	external	?list,?punch,?reader,?listst
;	external	?seldsk,?read,?write,?close
;	external	?home,?settrk,?setsec,?setdma
;	external	?sectrn
;	external	intkbd
;	external	cenout
;	external	pxtab
;	external	dpb
;	external	@error?,@write?
;	external	fkytab,dpb,kbdbuf
;	external	click,repeat,error
;
config_table:
	defw	bios			;00H  0
	defw	systab			;02H  2
	defw	fkytab			;04H  4
	defw	dpb			;06H  6
	defw	kbdbuf			;08H  8
	defw	click			;0AH 10
	defw	repeat			;0CH 12
	defw	error			;0EH 14
	defw	dummy			;10H 16
	defw	dummy			;12H 18
	defw	dummy			;14H 20
	defw	bell			;16H 22
	defw	@rowcol			;18H 24
	defw	int_on_off		;1AH 26
	defw	systab_length		;1CH 28
	defw	dummy			;1EH 30
	defw	dummy			;20H 32
	defw	kbstat			;22H 34
	defw	inkbds			;24H 36
	defw	key_ctrl_table		;26H 38
	defw	@charset		;28H 40
	defw	charset_length		;2AH 42
	defw	?video			;2CH 44
	defw	@siotab			;2EH 46

	defs	128-($-config_table),0

	.phase	0e400h

ccp	equ	$-22*256
bdos	equ	$-14*256
bios	equ	$
	if2
	.printl CCP
	.printn ccp
	.printl BDOS
	.printn bdos
	.printl BIOS
	.printn bios
	endif

	jp	?wboot		;00h  0		No Cboot !
	jp	?wboot		;03h  3
	jp	?const		;06h  6
	jp	?conin		;09h  9
	jp	?conout		;0ch 12
	jp	?list		;0fh 15
	jp	?punch		;12h 18
	jp	?reader		;15h 21
	jp	?home		;18h 24
	jp	?seldsk		;1bh 27
	jp	?settrk		;1eh 30
	jp	?setsec		;21h 33
	jp	?setdma		;24h 36
	jp	?read		;27h 39
	jp	?write		;2ah 42
	jp	?listst		;2dh 45
	jp	?sectrn		;30h 48
	jp	?close		;33h 51		Close File extension
	ret!nop!nop		;36h 54
	ret!nop!nop		;39h 57
	jp	?reboot		;3ch 60
	ret!nop!nop		;3fh 63		Print Error
	jp	?dskrst		;42h 66
	ret!nop!nop		;45h 69
	ret!nop!nop		;48h 72
	ret!nop!nop		;4bh 75
table:

?@clktab:	defw	clktab	;4eh 78		Clock table for PEEK/POKE
?@dpb:		defw	dpb	;50h 80		DPB table for PDRIVE
?@fkytab:	defw	fkytab	;52h 82		FKEY table for FKEY
?@systab:	defw	systab	;54h 84		SYSTAB table for Utilities

systab:					;Start marker

@k1dly:		defw	0200h		;Time until 1st repeat
@k2dly:		defw	0080h		;Time for following repeats
@dbnc1:		defw	500		;Debounce 1
@dbnc2:		defw	4000		;Debounce 2
@inlen:		defb	0		;# of chars in Keyboard buffer
		defb	0		;free
@crtlf:		defb	0		;Auto Linefeed on CRT ?
@wrap:		defb	0		;Wrap-around ?
@fxact:		defb	0		;FKeys active ?
@retries:	defb	2		;# of retries on Disk I/O
@lstlf:		defb	0		;Linefeed to List Device ?
		defb	0		;free
		defb	0		;free
@filin:		defb	0		;free
@chrset:	defb	0		;Charset code
		defb	0		;free
		defb	0		;free
@errdsk:	defb	0		;Disk to select after error
		defb	0		;free
		defb	0		;free
		defs	8,0
stptab:		defb	3,3,3,3		;Steprates
trktab:		defb	80,80,40,77	;# of tracks

systab_length	equ	$-systab

idtext:		defb	'2,1.2',0
;----------------------------------------------------------
?dskrst:
	ld	a,(4)				;reset on current disk
	and	0fh
	ld	(bdos+0342h),a
	ret
;----------------------------------------------------------
; Switch I/O Bank in & out
;
swtchi:
	di
	push	af
	ld	a,0000_0110b
	jr	switch
swtchg:						;Ena graphic mem
	di
	push	af
	ld	a,0000_1110b
	jr	switch
swtcho:
	push	af
	ld	a,0000_0111b
switch:
	out	(0feh),a
	pop	af
	ret
;
; Get Address for I/O
;
getadr:
	pop	hl				;no return from getadr
	ld	e,(hl)
	inc	hl
	ld	d,(hl)				;de = old vector
	inc	hl				;hl -> old_iobyte
	ld	a,(?io_byte)
	cp	(hl)				;same iobyte ?
	ex	de,hl				;hl = old vector
	jr	z,getadr_exit			;Y: same vector
	ex	de,hl
	ld	(hl),a				;N: save new iobyte
	push	hl
	dec	hl
	dec	hl
	ld	(@?old_vector),hl		;save address for new vector
	pop	hl
	inc	hl
	ld	b,(hl)				;b = iobyte part #
	inc	hl
getadr_loop:
	dec	b
	jr	z,getadr_getit
      2:rrca
	jr	getadr_loop
getadr_getit:
	and	0000_0011b
	rlca
	ld	e,a
	ld	d,b
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ld	(<@?old_vector: dw 0>),hl	;save new vector for next time
getadr_exit:
	jp	(hl)
;
;
; Save userstack
;
savstk:
	di
	ex	(sp),hl
	ld	(retjmp),hl
	pop	hl
	ld	(usrstk),sp
	ld	sp,stack
	push	hl
	ld	hl,getstk
	ex	(sp),hl
	call	swtchi
	jp	<retjmp: dw 0>

getstk:
	call	swtcho
	ld	sp,<usrstk: dw 0>
int_on_off:
	di			;or ei		;<*> !!!
	ret					;<*> !!!
;
; Interrupt Vector
;
interrupt:
	di
	ld	(intret),sp
	ld	sp,stack-4			;-4, so leave usr/int ret adr
						;alone if int happens at <*>
	push	af,bc,de,hl
	call	swtchi
	ld	a,(37ech)
	ld	a,(37e1h)
	call	intkbd
	call	swtcho
	pop	hl,de,bc,af
	ld	sp,<intret: dw 0>
	ei
	reti
;
; Ring bell
;
bell:
	nop		    ;Bell Flag
	push	bc
	ld	bc,0a080h
	ld	a,0000_0001b
bell1:
	out	(0ffh),a
	xor	0000_0011b
	push	bc
bell2:
	dec	c
	jr	nz,bell2
	pop	bc
	djnz	bell1
	pop	bc
	xor	a
	ret
;
;
;
;----------------------------------------------------------
;
; Reboot after Error
;
?reboot:
	ld	a,(@errdsk)
	ld	(4),a
;
;
; Warm start
;
?wboot:
	ld	hl,int_on_off
	ld	a,(hl)
	ld	(@wboot_int),a
	ld	(hl),<di>
	ld	sp,0
	xor	a
	ld	(@error?),a
	ld	(@write?),a
	dec	a
	ld	(@new_format?),a
	call	swap_dpb			;set wboot dpb
wboot_slct:
	xor	a
	ld	c,a				;drive A:
	ld	e,a
	call	?seldsk				;select drive A:
	ld	a,1
	ld	(@new_track),a
;
	ld	sp,stack
	call	swtchi
	ld	bc,11*256+0		;read 10 physical sectors on front
	ld	de,ccp			;to ccp
wboot_loop:
	push	bc
	push	de
	ld	a,c
	cp	10
	jr	c,not_backside
	sub	128+10
not_backside:
	ld	(@new_sector),a
	call	read_disk
	pop	de
	ld	bc,512
	ld	hl,secbuf
	ldir
	pop	bc
	inc	c
	djnz	wboot_loop
	call	swtcho
	call	swap_dpb			;reset dpb
wboot1:
	ld	hl,bios+3
	ld	a,<jp>
	ld	(0),a
	ld	(1),hl
	ld	hl,bdos+6
	ld	(5),a
	ld	(6),hl
	ld	hl,interrupt
	ld	(38h),a
	ld	(39h),hl
	ld	a,<@wboot_int: 0>
	ld	(int_on_off),a
	ld	a,(4)
	ld	c,a
	jp	ccp
;----------------------------------------------------------
swap_dpb:
	ld	de,(dph+0ah)			;de = dpb addr of 1st drive
	ld	hl,<dph_save: dw wboot_dpb>	;hl = dpb addr of wboot drive
	ld	(dph+0ah),hl
	ld	(dph_save),de
	ret
wboot_dpb:
	defw	80
	defs	13,0
	defb	2,3,5,10,80,0,0			;512 Bytes/Sector
clktab:
	defs	9,0

	include KEY.MAC
	include SCREEN.MAC
	include SCREEN.INC
	include MISCIO.MAC
	include DISK.MAC
	include TABLES.MAC

	defs	64,0				;make room for stack

	.printn $

	.dephase
	end
