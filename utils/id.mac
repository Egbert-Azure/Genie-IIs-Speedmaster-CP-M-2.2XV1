;****************************************************************
;*								*
;*	ID.MAC  Initialize Disk to different Format		*
;*	Genie IIs CP/M 2.2XV1  Version 1.0  19.05.86		*
;*	Copyright (c) by Klaus K{mpf Softwareentwicklung	*
;*						1985,1986	*
;*								*
;*	Modification History					*
;*								*
;*	Original 1.3 2.3.86					*
;*	1.4  13.03.86  Changed FORMAT DDEN, Timeloops		*
;*	1.5  22.03.86  Write_sec + format new setup		*
;*	1.0  19.05.86  1st IIs Adaption				*
;*								*
;****************************************************************
;
	.z80
	.com
	org	100h

	include CPMHEAD.INC

a$select	equ	037e0h
a$command	equ	037ech
a$status	equ	037ech
a$track		equ	037edh
a$sector	equ	037eeh
a$data		equ	037efh

;
	jp	entry
;
	defb	cr
	defm	'ID.COM'
	defb	cr,lf
	defm	'Copyright (c) by Klaus K{mpf Softwareentwicklung '
	defm	'1985,1986'
	defb	cr,lf
	defm	'Genie IIs CP/M 2.2XV1  Version 1.0 vom 19.05.86'
	defb	ctrlz
;
entry:
	ld	sp,stack

	ld	hl,@buffer		;Save buffer
	ld	de,iobuf
	ld	bc,80h
	ldir

	call	read_pdrive		;read pd-spec.
	call	read_booter		;read boot & loader
	call	read_cpm		;read ccp & bdos

	call	select_drive
	call	restore			;seek track 0

	call	single_density
	call	front_side
	call	build_track		;build memory image of track
	call	write_track		;write track 0

	call	back_side
	call	build_track		;build memory image of track
	call	write_track		;write track 0

	call	front_side
	call	write_boot		;write boot sector
	call	write_loader		;write cpmldr sectors

	call	front_side
	call	step_in			;seek track 1
	call	double_density
	call	build_track
	call	write_track

	call	back_side
	call	build_track
	call	write_track

	call	front_side
	call	write_cpm		;write ccp & bdos

	ld	de,final_text
	call	prttxt

	ld	a,<same_disk?: 0>
	or	a
	jp	z,?boot
	ld	de,insert_system
	call	wait_key
	jp	?boot
;
;----------------------------------------------------------
; Read CCP & BDOS
;
read_cpm:
	LD	DE,cpm_fcb
	LD	C,open
	CALL	?bdos
	inc	a				;Successful open ?
	jr	nz,cpm_open_ok			;Y: jp
	ld	a,1				;N: try on A:
	ld	(cpm_fcb),a
	ld	c,open
	call	?bdos
	inc	a				;Successful ?
	jp	z,cpm_open_error		;N: Error

cpm_open_ok:
	ld	b,44				;get 44 records (22 pages)
	ld	hl,cpm
	ld	(cpm_dma_adr),hl
read_cpm_loop:
	push	bc
	LD	DE,<cpm_dma_adr: dw 0>
	ld	c,setdma
	call	?bdos
	LD	DE,cpm_fcb
	LD	c,redseq
	CALL	?bdos
	pop	bc
	or	a
	jp	nz,cpm_read_error
	ld	hl,(cpm_dma_adr)
	ld	de,128
	add	hl,de
	ld	(cpm_dma_adr),hl
	djnz	read_cpm_loop
	ret

cpm_open_error:
	ld	de,cpm_open_text
	jp	error
cpm_read_error:
	ld	de,cpm_read_text
	jp	error
cpm_open_text:
	defm	'Kann File CPM22X.SYS nicht finden.$'
cpm_read_text:
	defm	'Kann File CPM22X.SYS nicht lesen.$'
cpm_fcb:
	defb	0
	defm	'CPM22X  ','SYS'
	defs	25,0
	
;----------------------------------------------------------
; Read BOOT & LOADER
;
read_booter:
	LD	DE,boot_fcb
	LD	C,open
	CALL	?bdos
	inc	a				;Successful open ?
	jr	nz,boot_open_ok			;Y: jp
	ld	a,1				;N: try on A:
	ld	(boot_fcb),a
	ld	c,open
	call	?bdos
	inc	a				;Successful ?
	jp	z,boot_open_error		;N: Error

boot_open_ok:
	ld	b,2				;get 2 records
	ld	hl,booter
	ld	(boot_dma_adr),hl
read_boot_loop:
	push	bc
	LD	DE,<boot_dma_adr: dw 0>
	ld	c,setdma
	call	?bdos
	LD	DE,boot_fcb
	LD	c,redseq
	CALL	?bdos
	pop	bc
	or	a
	jp	nz,boot_read_error
	ld	hl,(boot_dma_adr)
	ld	de,128
	add	hl,de
	ld	(boot_dma_adr),hl
	djnz	read_boot_loop
;
read_loader:
	LD	DE,loader_fcb
	LD	C,open
	CALL	?bdos
	inc	a				;Successful open ?
	jr	nz,loader_open_ok		;Y: jp
	ld	a,1				;N: try on A:
	ld	(loader_fcb),a
	ld	c,open
	call	?bdos
	inc	a				;Successful ?
	jp	z,loader_open_error		;N: Error

loader_open_ok:
	ld	b,32				;get 32 records (16 pages)
	ld	hl,loader
	ld	(loader_dma_adr),hl
read_loader_loop:
	push	bc
	LD	DE,<loader_dma_adr: dw 0>
	ld	c,setdma
	call	?bdos
	LD	DE,loader_fcb
	LD	c,redseq
	CALL	?bdos
	pop	bc
	or	a
	ret	nz
	ld	hl,(loader_dma_adr)
	ld	de,128
	add	hl,de
	ld	(loader_dma_adr),hl
	djnz	read_loader_loop
	ret
	
boot_open_error:
	ld	de,boot_open_text
	jp	error
boot_read_error:
	ld	de,boot_read_text
	jp	error
boot_open_text:
	defm	'Kann File SYSBOOT.SYS nicht finden.$'
boot_read_text:
	defm	'Kann File SYSBOOT.SYS nicht lesen.$'
boot_fcb:
	defb	0
	defm	'SYSBOOT ','SYS'
	defs	25,0

loader_open_error:
	ld	de,loader_open_text
	jp	error
loader_read_error:
	ld	de,loader_read_text
	jp	error
loader_open_text:
	defm	'Kann File LOADER.SYS nicht finden.$'
loader_read_text:
	defm	'Kann File LOADER.SYS nicht lesen.$'
loader_fcb:
	defb	0
	defm	'LOADER  ','SYS'
	defs	25,0
	
;----------------------------------------------------------
; set boot sector
;
write_boot:

	ld	a,80
	ld	(pd_info+1dh),a			;set # of tracks on drive

	ld	hl,pd_info+32
	ld	de,loader-32-64
	ld	bc,64
	ldir					;move xltab

	ld	a,00h
	ld	(de),a				;make it Speedmaster compatible
	inc	de
	ld	hl,pd_info
	ld	bc,31
	ldir					;move pd_info

	ld	de,booter
	ld	a,0				;start at 0
	ld	b,1				;1 sector
	call	write
	ret
;
; set cpmldr sectors
;
write_loader:
	ld	de,loader
	ld	a,1				;start at 1
	ld	b,16				;16 sectors
	call	write
	ret
;
; set ccp & bdos sectors
;
write_cpm:
	ld	de,cpm
	ld	a,0
	ld	b,11				;11 sectors a 512 bytes
	call	write
	ret
;
;----------------------------------------------------------
;
front_side:
	ld	a,(selcod)
	and	0fh
	ld	(selcod),a
	ld	a,0
	ld	(side_number),a
	ret
back_side:
	ld	a,(selcod)
	or	10h
	ld	(selcod),a
	ld	a,1
	ld	(side_number),a
	ret

single_density:
	ld	hl,sd_gap_table
	ld	(gap_address),hl
	ld	hl,256
	ld	(sector_length),hl
	ld	a,1
	ld	(length_code),a
	call	switch_in
	ld	hl,a$command
	ld	(hl),0d0h
	ld	(hl),0feh
	ld	(hl),0d0h
	call	switch_out
	ret
double_density:
	ld	hl,dd_gap_table
	ld	(gap_address),hl
	ld	hl,512
	ld	(sector_length),hl
	ld	a,2
	ld	(length_code),a
	call	switch_in
	ld	hl,a$command
	ld	(hl),0d0h
	ld	(hl),0ffh
	ld	(hl),0d0h
	call	switch_out
	ret
;
;----------------------------------------------------------
; restore selected disk
;
restore:
	call	switch_in
	xor	a
	ld	(track_number),a
	call	resel
	ld	a,03h				;restore (40/20 msec steprate)
	call	give_step_cmd
	xor	a
	ld	(track),a
	call	switch_out
	ret
;
give_step_cmd:
	ld	(a$command),a
nobusy:
	call	delay
	rrca
	ret	nc
	call	resel
	jr	nobusy
;
; step in
;
step_in:
	call	switch_in
	ld	a,1
	ld	(track_number),a
	call	resel
	ld	a,53h
	call	give_step_cmd
	ld	a,1
	ld	(track),a
	call	switch_out
	ret
;----------------------------------------------------------
;
; Select size & drive
;
select_drive:
	ld	c,curdsk
	call	?bdos
	ld	a,(drive_code)
	cp	l
	jr	nz,not_same_disk
	ld	a,0ffh
	ld	(same_disk?),a
	ld	de,insert_target
	call	wait_key
not_same_disk:
	ld	a,(drive_code)
	and	03h
	ld	b,a
	inc	b
	ld	a,080h
drvlop:
	rlca
	djnz	drvlop
	ld	(selcod),a

	call	switch_in
	call	resel				;select drive
	ld	bc,0
wait_select:					;wait for speed up
	dec	bc
	ld	a,b
	or	c
	jr	nz,wait_select
	call	resel

	ld	a,(a$status)			;anybody home ?
	and	2
	ld	e,a
	ld	hl,0
trylop:
	ld	a,(a$status)
	and	2
	xor	e				;Index found
	jr	nz,index_found			;Y: jp
	dec	hl
	ld	a,h
	or	l
	jr	nz,trylop
	jp	select_error
index_found:
	call	resel
	jp	switch_out
;----------------------------------------------------------
;
; write b sectors to disk starting at a; buffer = de
;
write:
	ld	(sector),a
	push	bc
	call	write_sec
	pop	bc
	ld	a,(sector)
	inc	a
	cp	10
	jr	c,write_next
	ld	a,(selcod)
	xor	10h				;switch side
	ld	(selcod),a
	xor	a				;restart at sector 0
write_next:
	djnz	write
	ret
	
write_sec:
	call	switch_in
	call	resel
	ld	a,(sector)
	ld	(a$sector),a
	ld	a,(track)
	ld	(a$track),a
	ld	hl,a$command
	ld	bc,a$data
	ld	(hl),0a8h			;write sector
	call	delay
	bit	0,a				;busy ?
	jr	z,write4
write0:
	ld	a,83h
	and	(hl)
	jp	po,write0
	ld	a,(de)
	ld	(bc),a
	inc	de
;
	ld	a,(de)
	ld	(@save_byte),a
	inc	de
	ld	a,1
write1:
	cp	(hl)
	jr	z,write1
	ld	a,<@save_byte: 0>
	ld	(bc),a
;
	ld	a,(de)
	inc	de
	bit	1,(hl)
	jr	nz,write2
	bit	1,(hl)
	jr	nz,write2
	jr	write3
write2:
	ld	(bc),a
	ld	a,(de)
	inc	de
write3:
	bit	1,(hl)
	jr	nz,write2
	bit	1,(hl)
	jr	nz,write2
	bit	1,(hl)
	jr	nz,write2
	bit	0,(hl)
	jr	z,write4
	bit	1,(hl)
	jr	nz,write2
	bit	7,(hl)
	jr	z,write3
write4:
	ld	a,(hl)
	ld	(hl),0d0h			;int cmd
	ld	(write_final_status),a
	and	07ch
	jp	nz,write_error
	dec	de
	jp	switch_out
;
;----------------------------------------------------------
; delay and get status
;
delay:
	ld	a,20
delay1:
	dec	a
	jr	nz,delay1
	ld	a,(a$status)
	ret
;
; reselect current drive
;
resel:
	ld	a,(selcod)
	ld	(a$select),a
	ret
;
; switch in and out
;
switch_in:
	di
	ld	a,0000_0110b
	out	(0feh),a
	ret
switch_out:
	di
	ld	a,0000_0111b
	out	(0feh),a
	ret
;
;----------------------------------------------------------
	.printl Opening Format
	include FORMAT.INC
;----------------------------------------------------------
	.printl Opening Readpd
	include READPD.INC
;----------------------------------------------------------
;
select_error:
	call	switch_out
	ld	de,select_text
	jp	error
;
format_error:
	call	switch_out
	ld	a,(track_number)
	add	a,'0'
	ld	(track_text),a
	ld	a,<format_final_status: 0>
	push	af
	rrca
	rrca
	rrca
	rrca
	call	hex_to_a
	ld	(fmt_digit_10),a
	pop	af
	call	hex_to_a
	ld	(fmt_digit_1),a
	ld	de,format_text
	jp	error
;
write_error:
	call	switch_out
	ld	a,(track_number)
	add	a,'0'
	ld	(@write_track),a
	ld	a,(sector)
	add	a,'0'
	ld	(@write_sector),a
	ld	a,(side_number)
	add	a,'0'
	ld	(@write_side),a
	ld	a,<write_final_status: 0>
	push	af
	rrca
	rrca
	rrca
	rrca
	call	hex_to_a
	ld	(wrt_digit_10),a
	pop	af
	call	hex_to_a
	ld	(wrt_digit_1),a
	ld	de,write_text
	jp	error
hex_to_a:
	and	0fh
	cp	0ah
	jr	c,its_digit
	add	a,7
its_digit:
	add	a,'0'
	ret
error:
	push	de
	ld	de,error_text
	call	prttxt
	pop	de
	call	prttxt
	ld	de,crlf_text
	call	prttxt
	ld	c,13				;reset disk system
	call	?bdos
	jp	?boot
;
prttxt:
	ld	c,prtstr
	call	?bdos
	ret
;
wait_key:
	call	prttxt
wait_key_loop:
	ld	e,0ffh
	ld	c,drctio
	call	?bdos
	cp	cr
	jr	nz,wait_key_loop
	ld	de,crlf_text
	jp	prttxt
;
;
crlf_text:
	defb	cr,lf,cr,lf,'$'

final_text:
	defb	cr,lf
	defm	'Diskette auf gew}nschtes Format eingestellt.'
	defb	cr,lf,'$'
error_text:
	defb	cr,lf,bell
	defm	'**** Fehler:'
	defb	cr,lf,'$'
select_text:
	defm	'Angew{hltes Laufwerk enth{lt keine Diskette.$'
format_text:
	defm	'Kann Spur '
track_text:
	defm	'0 nicht formatieren.'
	defb	cr,lf
	defm	'Fehlercode: '
fmt_digit_10:
	defb	'*'
fmt_digit_1:
	defm	'*H.'
	defb	cr,lf
	defm	'Diskette schreibgesch}tzt ?$'
write_text:
	defm	'Kann Sektor '
@write_sector:
	defm	'0, Spur '
@write_track:
	defm	'0, Seite '
@write_side:
	defm	'0 nicht schreiben.'
	defb	cr,lf
	defm	'Fehlercode: '
wrt_digit_10:
	defb	'*'
wrt_digit_1:
	defm	'*H.$'
insert_system:
	defb	cr,lf
	defm	'Systemdiskette einlegen und <NEW LINE> dr}cken.$'
insert_target:
	defb	cr,lf
	defm	'Zieldiskette einlegen und <NEW LINE> dr}cken.$'
;
;
drive_code:	defb	0		;Drivecode
drvnum:		defb	0		;Logical drivename -41H
drive_name:	defb	0		;Drivename 'A'-'D'
sector:		defb	0		;sector# during build and write
track:		defb	0		;track# during write
selcod:		defb	0		;select code

iobuf:		defs	128,0

name_buffer:	defs	128*16,0	;128 names
pd_info:	defs	128,0		;pd-record of selected format

		defs	128,0
		defs	(($ and 0ff00h)+ 256) - $ , 0
stack:

booter		equ	5000h
loader		equ	booter + 256
cpm		equ	booter + 20*256
track_buffer	equ	booter + 20*256 + 20*512


	END
