;********************************************************
;*							*
;*	SCREEN.MAC  Video driver module			*
;*	Genie IIs  CP/M 2.2XV1  Version 0.4  18.05.86	*
;*	Copyright (c) Klaus K{mpf Softwareentwicklung	*
;*					1984,1985,1986	*
;*	Modification History				*
;*	0.0  19.04.86  Original from Genie III		*
;*	0.1  26.04.86  1st IIs Adaption 64x16		*
;*	0.11 28.04.86  removed line25,print,usrline	*
;*	0.2  30.04.86  Graphic 80x24 Adaption		*
;*	0.21  1.05.86  further improvements		*
;*	0.22  3.05.86  Invert & Cursor Adaption		*
;*	0.23 14.05.86  1st Clear Adaption		*
;*		       ctrl correction (stack)		*
;*	0.24 15.05.86  2nd Clear Adaption		*
;*	0.25 15.05.86  insert & delete line		*
;*	0.3  15.05.86  1st final version		*
;*	0.4  18.05.86  SIO Adaption			*
;*		       Added old_iobyte after getadr	*
;*		       moved savstk from getadr		*
;*							*
;********************************************************
	.printl Including SCREEN.MAC

#home	equ	0000h		;row 00 / Col 00
#scrbot	equ	1700h		;row 23 / Col 00
#srclst	equ	174fh		;row 23 / Col 79

;	public		?conout,crtst,crtout
;	public		monit,esc_change,esc_end
;
;	external	getadr,?punch,savstk
;	external	censt,cenout,siost,sioout
;	external	print,clock
;	external	bell
;	external	click,fkyput
;	external	statxt,idtext
;	external	@crtlf,@wrap,@fxact,@insrt
;	external	@plmod,@filin
;
?conout:
	call	savstk
conout:
	call getadr
	defw	<@?conout: dw crtout>
	defb	0
	defb	1
	defw	sioAout
	defw	crtout
	defw	punch
	defw	sioBout

crtst:
	ld	a,0ffh
	or	a
	ret
;
;----------------------------------------------------------
;
?video:
crtout:
	call	swtchg
	call	show_cursor			;=> cursor off
	ld	hl,swtchi
	push	hl
	ld	hl,show_cursor
	push	hl				;=> cursor on (on exit)
	ld	hl,common_return		;Set return address
	push	hl
	ld	hl,<@rowcol: dw 0>
	push	hl
	ld	a,c
	jp	<crt_vector: dw chrout>
;
; a,c    = Character
; (sp)   = @rowcol
; (sp-2) = common_return
;
chrout:
;
;	pop  de
;	call monit
;	push de
;
chout3:
	ld	a,c
	cp	space				;ctrl-Char ?
	jr	c,ctrl
	pop	hl				;HL = @rowcol
	ld	a,<@vidinv: 0>			;Invers flag
	or	a				;Invers on ?
	jr	z,noinv
	cp	1				;Real Invers ?
	jr	z,yesinv
	ld	a,c
	cp	space				;space ?
	jr	z,noinv				;Y: no inv
yesinv:
	ld	a,<cpl>
	ld	(@invert),a
noinv:
	ld	a,c
	and	07FH
	call	show_char
	jp	vtwrap				;Vertical Wrap ?
;
;
;
common_return:
	ld	a,h
	cp	#row				;toobig ?
	call	nc,scroll
	ld	(@rowcol),hl
	ret					;to show cursor
;
;----------------------------------------------------------
; crtl-char processing
ctrl:
	pop	hl
	sub	7
	ret	c
	add	a,a			;A = 0 (7) .. 48 (31)
	ld	e,a
	ld	d,0
	cp	14			;0 (7) .. 12 (13) ?
	jr	c,ctrl_val_ok		;Y: ok
	sub	16			;14 (22) .. 32 (31)
	ret	c
	ld	e,a
ctrl_val_ok:
	push	hl
	ld	hl,ctrl_table
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	ex	(sp),hl
	ret
					; hl = @rowcol
					;(sp)= common_return

escape:
	push hl				;save @rowcol
	ld   hl,esc_next

esc_change:
	ld   (crt_vector),hl
	pop  hl				;pop @rowcol address
	ret				;to common_return

esc_end:
	ld   hl,chrout			;Reset jmpvector
	jr   esc_change
;
; a,c    = xx (after esc !)
; (sp-2) = common_return
; (sp)   = @rowcol
; jmp comes from crt
;
esc_next:
	ld   bc,jump_table-esc_table
	ld   hl,esc_table
	cpir
	jr   nz,esc_end
	ld   a,c
	add  a,a
	add  a,c			;a= 3 * Offset
	ld   c,a
	ld   b,0
	ld   hl,jump_table
	add  hl,bc
	ld   a,(hl)
	inc  hl
	ld   d,(hl)
	ld   e,a			;de=address
	inc  hl
	ld   a,(hl)			;get type flag
	cp   2
	jr   z,type2
	ld   hl,chrout
	ld   (crt_vector),hl
	dec  a
	jr   z,type1
type0:
	ex   de,hl			;hl=address
	ex   (sp),hl			;hl=@rowcol,(sp)=address
	ret				;(sp) = common_return
type1:
	pop  hl				;pop @rowcol
	pop  hl				;pop common_return
	push de				;push address
	ret				;(sp) = bdos return
type2:
	ld   (crt_vector),de		;set new vector
	pop  de				;pop @rowcol
	pop  de				;pop common_return
	ret				;ret to bdos
;----------------------------------------------------------
back:
	call	prev
	ld	a,h
	cp	#row			;toolow ?
	call	nc,next
	ret
;
tab:
	push	hl
	ld	a,' '
	call	show_char
	pop	hl
	call	next
	ld	a,h
	cp	#row				;toobig ?
	call	nc,scroll
	ld	a,l
	and	7
	jr	nz,tab
	ret
;
cr:
	ld	l,0
	ret
;
crret:
	ld	l,0				;make cr
	ld	a,(@crtlf)			;Auto linefeed ?
	or	a
	ret	nz				;N: cr only
;
newlin:
	ld	l,0
lf:
	inc	h
	ret
;
curup:
	dec	h
	ld	a,h
	cp	#row				;toolow ?
	ret	c
	inc	h
	ret
;
currgt:
	call	vtwrap				;inc row/col & test
	ld	a,h
	cp	#row				;toobig ?
	call	nc,prev
	ret
;
curdo:
	inc	h
	ld	a,h
	cp	#row				;toobig ?
	ret	c
	dec	h
	ret
;
chome:
	ld	hl,#home
	ret
;----------------------------------------------------------
alton:
	ld	a,02h
	jr	altset
altoff:
	xor	a
altset:
	ld	(@vidinv),a
	ret
;
wrpon:
	xor	a
	jr	wrpset
wrpoff:
	ld	a,0ffh
wrpset:
	ld	(@wrap),a
	ret
;
;----------------------------------------------------------
; jmp comes from esc_next
;
inslin:
	ld	a,h
	ld	h,#row-1
	ld	l,#row
insert_line_loop:
	cp	h
	jr	z,end_insert
	dec	h
	dec	l
	push	af,hl
	call	copy_row			;copy H -> L
	pop	hl,af
	jr	insert_line_loop
end_insert:
	jp	clear_line
;
dellin:
	push	hl
	ld	l,h
	jr	end_delete
delete_line_loop:
	inc	h
	push	hl
	call	copy_row			;copy H -> L
	pop	hl
	inc	l
end_delete:
	ld	a,#row-1
	cp	h
	jr	nz,delete_line_loop
	call	clear_line
	pop	hl
	ret
;
ceopsp:
	push	hl
	ld	d,#row-1			;D = EOP (row 23)
	jr	clear_eox
ceolsp:
	push	hl
	ld	d,h				;D = EOL (current row)
clear_eox:
	call	clear
	pop	hl
	ret
;
;
; Report Cursor Position
;
curpos:
	push	hl
	ld	bc,cpostx			;bc=Text pointer
	ld	a,h
	add	a,20h
	ld	(bc),a				;set row
	inc	bc
	ld	a,l
	add	a,20h
	ld	(bc),a				;set col
	ld	hl,<postxt: dw 0>		;BC = Position Text
	call	sndspc
	ld	hl,cpostx			;Set Cursor Pos. Text
	ld	(postxt),hl
	pop	hl
	ret
;
cpostx:
	defb 0				;Row
	defb 0				;Column
	defb 0				;End of Text
;
;----------------------------------------------------------
; jmp comes from crt (retadr = common_return)
;
vidatr:
	cp	'<'				;Underline/Invers
	ld	bc,0ff01h
	jr	z,set_vidatr
	cp	'8'				;Underline
	ld	bc,0ff00h
	jr	z,set_vidatr
	cp	'4'				;Invers
	ld	bc,0001h
	jr	z,set_vidatr
	ld	bc,0000h			;None
set_vidatr:
	ld	a,c
	ld	(@vidinv),a
	ld	a,b
	ld	(@underline),a
	jp	esc_end
;
curatr:
	sub	'0'
	jr	c,cuatr3
	cp	5
	jr	nc,cuatr3
	inc	a
	ld	bc,catrtb-1
cuatr1:
	inc	bc
	dec	a
	jr	nz,cuatr1
cuatr2:
	ld	a,(bc)
	ld	de,00ffh
	ld	hl,@cursor_table
	ld	b,8
cuatr_loop:
	ld	(hl),d				;set 00
	rlca					;0 ok ?
	jr	nc,nullisok			;Y: jp
	ld	(hl),e				;N: set FF
nullisok:
	inc	hl
	djnz	cuatr_loop
cuatr3:
	jp	esc_end
;
catrtb:
	defb	0000_0000b			;Cursor off
	defb	1111_1111b			;Cursor blinking block
	defb	1111_1111b			;Cursor steady block
	defb	0000_0001b			;Cursor blinking underline
	defb	0000_0001b			;Cursor steady underline
@cursor_table:
	defb	0,0,0,0,0,0,0,0
;
curadr:
	ld	(newrow),a
	ld	hl,curad1
	jp	esc_change
;
curad1:
	pop	hl
	ld	a,<newrow: 0>
	sub	20h
	cp	#row				;Value ok ?
	jr	c,curad2
	ld	a,#row-1			;N: set to last line
curad2:
	ld	h,a
	ld	a,c
	sub	20h
	cp	#col
	jr	c,curad3
	ld	a,#col-1
curad3:
	ld	l,a
	push	hl
	jp	esc_end
;
;
setpar:
	ld	hl,esc_end
	push	hl				;set ret adr to esc_end
	sub	'2'
	ret	c
	cp	4
	ret	nc
	ld	c,a
	ld	b,0
	ld	hl,parjmp
	add	hl,bc
	add	hl,bc
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	jp	(hl)				;(sp) = esc_end
;
fknorm:
	xor	a				;Fkeys normal
	jr	fkey_set
fkspcl:
	ld	a,0ffh				;Fkeys special
fkey_set:
	ld	(@fxact),a
	ret
;
german:
	ld	a,(@chrset)
	xor	1
	ret	nz
	jr	swap_char
ascii:
	ld	a,(@chrset)
	xor	1
	ret	z
;
; swap charset
; I: A = new charset code
;    0 = german
;    1 = ascii
;
swap_char:
	ld	(@chrset),a
	push	ix
	ld	ix,@swap_table
	ld	de,@swap_set
	ld	b,8				;8 chars to swap
swap_char_loop:
	push	bc
	ld	a,(ix)
	call	get_image_address
	ld	bc,08ffh
swap_image_loop:
	ld	a,(de)
	ldi					;(hl) -> (de)
	dec	hl
	ld	(hl),a
	inc	hl
	djnz	swap_image_loop
	pop	bc
	inc	ix
	djnz	swap_char_loop
	pop	ix
	ret
@swap_table:
	defb	40h,5bh,5ch,5dh,7bh,7ch,7dh,7eh
;		 @   [   \   ]   {   |   }   ~
;
;----------------------------------------------------------
;
;
; Copy Row H to Row L
; I: H = Soure Row
;    L = Dest Row
;
copy_row:
	push	hl
	ld	d,l				;de = dest row/col
	ld	e,0				;from col 0
	ld	l,e				;hl = source row/col
	ld	c,64				;64 cols
	call	copy_area
	pop	hl
	ld	d,l				;de = dest row/col
	ld	e,64				;from col 64
	ld	l,e				;hl = source row/col
	ld	c,16				;16 cols
;
; copy C chars from H/L to D/E
; H/L & D/E must be within the same area
;
copy_area:
	push	bc,de				;save len, dest row
	call	get_address
	ex	(sp),hl				;(sp) = source addr
	call	get_address
	ex	de,hl				;de = destination address
	pop	hl				;hl = source address
	pop	bc				;c = # of chars
	ld	b,8				;b = # of scanlines
copy_area_loop:
	push	bc,de,hl
	ld	b,0				;bc = # or chars
	ldir
	pop	hl				;hl = old source
	call	next_scanline
	ex	(sp),hl				;(sp) = new source
	call	next_scanline
	ex	de,hl				;de = new dest
	pop	hl,bc				;hl = new source
	djnz	copy_area_loop
	ret
;
;
; Clear Line H
;
clear_line:
	ld	l,0
	ld	d,h
;
;
; Clear from HL up to DE
; HL = Start Row/Col		(@rowcol)
; D  = End Row			(EOL/EOP)
;
clear:
	ld	a,d
	sub	h				;start > end ?
	ret	c				;Y: ret
	inc	a
	ld	b,a
clear_loop:
	push	bc				;save count
	ld	a,l
	cp	64				;Start in inner ?
	jr	nc,outer_start
	ld	a,63
	call	clear_part			;Y: clear inner
	ld	l,64
outer_start:
	ld	a,79
	call	clear_part			;clear outer
	pop	bc
	inc	h				;next row
	ld	l,0				;col 0
	djnz	clear_loop			;next row
	dec	h
	ret
;
;
; Clear from H/L to H/A
; preserves HL
;
clear_part:
	push	hl
	sub	l
	ld	c,a
	ld	b,0				;BC = length
	push	bc
	call	get_address			;HL = 1st scanline address
	pop	bc
	ld	a,8				;8 Scanlines
clear_scan:
	push	af,bc
	ld	d,h
	ld	e,l
	inc	de
	ld	(hl),0
	ld	a,c
	or	a				;only 1 char ? (diff = 0)
	jr	z,clear_next_scan		;Y: next scan
	push	hl
	ldir
	pop	hl
clear_next_scan:
	call	next_scanline
	pop	bc,af
	dec	a
	jr	nz,clear_scan
	pop	hl
	ret
;
;
trnsid:
	ld	hl,idtext
;
;
; Send Char from HL to (00) to keybuf
; Send Space ?
;
sndspc:
	ld	a,(@filin)			;fill with space ?
	or	a
	push	hl
	ld	hl,sndsp1
	call	z,fkyput			;J: send one space
	pop	hl
	call	fkyput				;send text
	ld	hl,sndcr
	jp	fkyput				;send <CR>

sndsp1:
	defb	20h,00h
sndcr:
	defb	0dh,00h
;
;
; Vertical Wrap ?
; I: HL = Row/Col
; O: HL = new Row/Col
;
vtwrap:
	inc	l				;next col
	ld	a,#col-1
	cp	l				;col overflow ?
	ret	nc				;N: ret
	ld	l,a
	ld	a,(@wrap)			;shall we wrap ?
	or	a				;Y: z, N: nz
	ret	nz
	ld	l,0
	inc	h
	ret
;
;
; Cursor to next position
;
next:
	inc	l
	ld	a,l
	cp	#col
	ret	c
	ld	l,0
	inc	h
	ret
;
;
; Cursor to prev position
;
prev:
	dec	l
	ld	a,l
	or	a
	ret	p
	ld	l,#col-1
	dec	h
	ret	
;
;----------------------------------------------------------
;
; Get Scanline address
; I: H = Row (0..#row-1)
;    L = Column (0..#col-1)
; O: HL = address of 1st Scanline
;
get_address:
	ld	a,l
	ld	c,l
	ld	b,0
	cp	64
	ld	de,inner_addresses
	jr	c,inner_area
	ld	de,outer_addresses
inner_area:
	ld	l,h
	ld	h,0
	add	hl,hl
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a
	add	hl,bc
	ret
;
inner_addresses:
	defw	0000h,2000h,1040h,0080h,2080h
	defw	10c0h,0100h,2100h,1140h,0180h
	defw	2180h,11c0h,0200h,2200h,1240h
	defw	0280h,2280h,12c0h,0300h,2300h
	defw	1340h,0380h,2380h,13c0h
;
outer_addresses:
	defw	3000h-64
	defw	3020h-64
	defw	3050h-64
	defw	3080h-64
	defw	30a0h-64
	defw	30d0h-64
	defw	3100h-64
	defw	3120h-64
	defw	3150h-64
	defw	3180h-64
	defw	31a0h-64
	defw	31d0h-64
	defw	3200h-64
	defw	3220h-64
	defw	3250h-64
	defw	3280h-64
	defw	32a0h-64
	defw	32d0h-64
	defw	3300h-64
	defw	3320h-64
	defw	3350h-64
	defw	3380h-64
	defw	33a0h-64
	defw	33d0h-64
;
; put byte & compute next scanline address
;
;
put_byte:
	ld	(hl),a
;
; Compute next scanline address
; I: HL = current scanline address
; O: HL = next scanline address
;
next_scanline:
	ld	a,h
	cp	030H
	jp	nc,next_outer_adr
	jp	next_inner_adr
;
;
; Show Character at Row/Col
; I: H = Row
;    L = Column
;    A = Char
;
show_char:
	push	ix,hl,af
	call	get_image_address
	push hl!pop ix				;IX -> @charset
	pop	af,hl

	push	hl
	call	get_address
	ld	b,8
show_loop:
	dec	b
	ld	c,0
	jr	nz,no_underline
	ld	c,<@underline: 0>
no_underline:
	inc	b
	ld	a,(ix+0)
	or	c
@invert:
	nop					;or cpl
	push	bc
	call	put_byte
	pop	bc
	inc	ix
	djnz	show_loop
	xor	a
	ld	(@invert),a
	pop	hl,ix
	ret
;
; Get address of char image
; I: A  = charval 32..127
; O: HL = Address of char image in @charset
; uses bc
;
get_image_address:
	ld	l,a
	ld	h,0
      3:add	hl,hl				;HL = Char * 8
	ld	bc,@charset-8*32
	add	hl,bc
	ret
;
;
; Show Cursor by inverting char
;
show_cursor:
	push	ix,hl,bc
	ld	hl,(@rowcol)
	call	get_address
	ld	ix,@cursor_table
	ld	b,8
cursor_loop:
	ld	a,(hl)
	xor	(ix)
	push	bc
	call	put_byte			;put byte & get next adr
	pop	bc
	inc	ix
	djnz	cursor_loop
	pop	bc,hl,ix
	ret
;
scroll:
	exx
	push	hl,de
	exx

	ld	hl,02000H
	ld	de,0
	exx
	ld	hl,03020H
	ld	de,03000H
	exx
	ld	b,184
scroll_loop1:
	push	bc
	push	hl
	push	de
	ld	bc,64
	ldir
	pop	de
	pop	hl
	call	next_inner_adr
	ex	de,hl
	call	next_inner_adr
	ex	de,hl
	exx
	push	hl,de
	ld	bc,16
	ldir
	pop	de,hl
	call	next_outer_adr
	ex	de,hl
	call	next_outer_adr
	ex	de,hl
	exx
	pop	bc
	djnz	scroll_loop1
;
	ld	hl,013C0H
	ld	b,8
scroll_loop2:
	push	bc,hl
	push	hl
	pop	de
	inc	de
	ld	bc,63
	ld	(hl),0
	ldir
	pop	hl
	call	next_inner_adr
	pop	bc
	djnz	scroll_loop2
;
	ld	b,4
	ld	hl,033D0H
scroll_loop3:
	push	bc,hl
	push	hl
	pop	de
	inc	de
	ld	bc,31
	ld	(hl),0
	ldir
	pop	hl
	call	next_outer_adr
	pop	bc
	djnz	scroll_loop3
	ld	hl,23*256+0

	exx
	pop	de,hl
	exx

	ret
;
;
; Compute next scanline address in inner area
; I: HL = current scanline address
; O: HL = next scanline address
; uses BC,AF
;
next_inner_adr:
	ld	bc,00400H
	add	hl,bc
	ld	a,h
	cp	030H
	ret	c
	ld	bc,0D040H			;=-2FC0H
	add	hl,bc
	ret
;
; Compute next scanline address in outer area
; I: HL = current scanline address
; O: HL = next scanline address
; uses BC,AF
;
next_outer_adr:
	ld	bc,1024
	add	hl,bc
	bit	6,h
	ret	z
	ld	bc,0F010h			;=-0FF0H = -4080
	add	hl,bc
	ld	a,l
	and	030H
	cp	030H
	ret	nz
	ld	bc,16
	add	hl,bc
	ret
;
clsnul:
clsspc:
cls:
	ld	hl,0000h
	ld	de,0001h
	ld	bc,3FFFH
	ld	(hl),0
	ldir
	jp	chome
;
